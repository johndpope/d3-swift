function addEventListener(type, listener) {
    var elem = this;
    elem.listeners || (elem.listeners = {}), elem.listeners[type] || (elem.listeners[type] = []), 
    -1 === elem.listeners[type].indexOf(listener) && elem.listeners[type].push(listener);
}

function dispatchEvent(ev) {
    var elem = this, type = ev.type;
    ev.target || (ev.target = elem), elem.listeners || (elem.listeners = {});
    var listeners = elem.listeners[type];
    if (listeners) return listeners.forEach(function(listener) {
        ev.currentTarget = elem, "function" == typeof listener ? listener(ev) : listener.handleEvent(ev);
    });
    elem.parentNode && elem.parentNode.dispatchEvent(ev);
}

function Document() {
    if (!(this instanceof Document)) return new Document();
    this.head = this.createElement("head"), this.body = this.createElement("body"), 
    this.documentElement = this.createElement("html"), this.documentElement.appendChild(this.head), 
    this.documentElement.appendChild(this.body), this.childNodes = [ this.documentElement ], 
    this.nodeType = 9;
}

function Comment(data, owner) {
    if (!(this instanceof Comment)) return new Comment(data, owner);
    this.data = data, this.nodeValue = data, this.length = data.length, this.ownerDocument = owner || null;
}

function DOMElement(tagName, owner, namespace) {
    if (!(this instanceof DOMElement)) return new DOMElement(tagName);
    var ns = void 0 === namespace ? htmlns : namespace || null;
    this.tagName = ns === htmlns ? String(tagName).toUpperCase() : tagName, this.nodeName = this.tagName, 
    this.className = "", this.dataset = {}, this.childNodes = [], this.parentNode = null, 
    this.style = {}, this.ownerDocument = owner || null, this.namespaceURI = ns, this._attributes = {}, 
    "INPUT" === this.tagName && (this.type = "text");
}

function DocumentFragment(owner) {
    if (!(this instanceof DocumentFragment)) return new DocumentFragment();
    this.childNodes = [], this.parentNode = null, this.ownerDocument = owner || null;
}

function DOMText(value, owner) {
    if (!(this instanceof DOMText)) return new DOMText(value);
    this.data = value || "", this.length = this.data.length, this.ownerDocument = owner || null;
}

function domWalk(nodes, cb) {
    "length" in nodes || (nodes = [ nodes ]), nodes = slice.call(nodes);
    for (;nodes.length; ) {
        var node = nodes.shift(), ret = cb(node);
        if (ret) return ret;
        node.childNodes && node.childNodes.length && (nodes = slice.call(node.childNodes).concat(nodes));
    }
}

function Event(family) {}

function removeEventListener(type, listener) {
    var elem = this;
    if (elem.listeners && elem.listeners[type]) {
        var list = elem.listeners[type], index = list.indexOf(listener);
        -1 !== index && list.splice(index, 1);
    }
}

function serializeNode(node) {
    switch (node.nodeType) {
      case 3:
        return escapeText(node.data);

      case 8:
        return "\x3c!--" + node.data + "--\x3e";

      default:
        return serializeElement(node);
    }
}

function serializeElement(elem) {
    var strings = [], tagname = elem.tagName;
    return "http://www.w3.org/1999/xhtml" === elem.namespaceURI && (tagname = tagname.toLowerCase()), 
    strings.push("<" + tagname + properties(elem) + datasetify(elem)), voidElements.indexOf(tagname) > -1 ? strings.push(" />") : (strings.push(">"), 
    elem.childNodes.length ? strings.push.apply(strings, elem.childNodes.map(serializeNode)) : elem.textContent || elem.innerText ? strings.push(escapeText(elem.textContent || elem.innerText)) : elem.innerHTML && strings.push(elem.innerHTML), 
    strings.push("</" + tagname + ">")), strings.join("");
}

function isProperty(elem, key) {
    var type = typeof elem[key];
    return "style" === key && Object.keys(elem.style).length > 0 || elem.hasOwnProperty(key) && ("string" === type || "boolean" === type || "number" === type) && "nodeName" !== key && "className" !== key && "tagName" !== key && "textContent" !== key && "innerText" !== key && "namespaceURI" !== key && "innerHTML" !== key;
}

function stylify(styles) {
    if ("string" == typeof styles) return styles;
    var attr = "";
    return Object.keys(styles).forEach(function(key) {
        var value = styles[key];
        key = key.replace(/[A-Z]/g, function(c) {
            return "-" + c.toLowerCase();
        }), attr += key + ":" + value + ";";
    }), attr;
}

function datasetify(elem) {
    var ds = elem.dataset, props = [];
    for (var key in ds) props.push({
        name: "data-" + key,
        value: ds[key]
    });
    return props.length ? stringify(props) : "";
}

function stringify(list) {
    var attributes = [];
    return list.forEach(function(tuple) {
        var name = tuple.name, value = tuple.value;
        "style" === name && (value = stylify(value)), attributes.push(name + '="' + escapeAttributeValue(value) + '"');
    }), attributes.length ? " " + attributes.join(" ") : "";
}

function properties(elem) {
    var props = [];
    for (var key in elem) isProperty(elem, key) && props.push({
        name: key,
        value: elem[key]
    });
    for (var ns in elem._attributes) for (var attribute in elem._attributes[ns]) {
        var prop = elem._attributes[ns][attribute], name = (prop.prefix ? prop.prefix + ":" : "") + attribute;
        props.push({
            name: name,
            value: prop.value
        });
    }
    return elem.className && props.push({
        name: "class",
        value: elem.className
    }), props.length ? stringify(props) : "";
}

function escapeText(s) {
    var str = "";
    return "string" == typeof s ? str = s : s && (str = s.toString()), str.replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;");
}

function escapeAttributeValue(str) {
    return escapeText(str).replace(/"/g, "&quot;");
}

module.exports = addEventListener, module.exports = dispatchEvent;

//var domWalk = require("dom-walk"), Comment = require("./dom-comment.js"), DOMText = require("./dom-text.js"), DOMElement = require("./dom-element.js"), DocumentFragment = require("./dom-fragment.js"), Event = require("./event.js"), dispatchEvent = require("./event/dispatch-event.js"), addEventListener = require("./event/add-event-listener.js"), removeEventListener = require("./event/remove-event-listener.js");

module.exports = Document;

var proto = Document.prototype;

proto.createTextNode = function(value) {
    return new DOMText(value, this);
}, proto.createElementNS = function(namespace, tagName) {
    var ns = null === namespace ? null : String(namespace);
    return new DOMElement(tagName, this, ns);
}, proto.createElement = function(tagName) {
    return new DOMElement(tagName, this);
}, proto.createDocumentFragment = function() {
    return new DocumentFragment(this);
}, proto.createEvent = function(family) {
    return new Event(family);
}, proto.createComment = function(data) {
    return new Comment(data, this);
}, proto.getElementById = function(id) {
    return id = String(id), domWalk(this.childNodes, function(node) {
        if (String(node.id) === id) return node;
    }) || null;
}, proto.getElementsByClassName = DOMElement.prototype.getElementsByClassName, proto.getElementsByTagName = DOMElement.prototype.getElementsByTagName, 
proto.contains = DOMElement.prototype.contains, proto.removeEventListener = removeEventListener, 
proto.addEventListener = addEventListener, proto.dispatchEvent = dispatchEvent, 
module.exports = Comment, Comment.prototype.nodeType = 8, Comment.prototype.nodeName = "#comment", 
Comment.prototype.toString = function() {
    return "[object Comment]";
};

//var domWalk = require("dom-walk"), dispatchEvent = require("./event/dispatch-event.js"), addEventListener = require("./event/add-event-listener.js"), removeEventListener = require("./event/remove-event-listener.js"), serializeNode = require("./serialize.js"), htmlns = "http://www.w3.org/1999/xhtml";

module.exports = DOMElement, DOMElement.prototype.type = "DOMElement", DOMElement.prototype.nodeType = 1, 
DOMElement.prototype.appendChild = function(child) {
    return child.parentNode && child.parentNode.removeChild(child), this.childNodes.push(child), 
    child.parentNode = this, child;
}, DOMElement.prototype.replaceChild = function(elem, needle) {
    elem.parentNode && elem.parentNode.removeChild(elem);
    var index = this.childNodes.indexOf(needle);
    return needle.parentNode = null, this.childNodes[index] = elem, elem.parentNode = this, 
    needle;
}, DOMElement.prototype.removeChild = function(elem) {
    var index = this.childNodes.indexOf(elem);
    return this.childNodes.splice(index, 1), elem.parentNode = null, elem;
}, DOMElement.prototype.insertBefore = function(elem, needle) {
    elem.parentNode && elem.parentNode.removeChild(elem);
    var index = null === needle || void 0 === needle ? -1 : this.childNodes.indexOf(needle);
    return index > -1 ? this.childNodes.splice(index, 0, elem) : this.childNodes.push(elem), 
    elem.parentNode = this, elem;
}, DOMElement.prototype.setAttributeNS = function(namespace, name, value) {
    var prefix = null, localName = name, colonPosition = name.indexOf(":");
    colonPosition > -1 && (prefix = name.substr(0, colonPosition), localName = name.substr(colonPosition + 1)), 
    "INPUT" === this.tagName && "type" === name ? this.type = value : (this._attributes[namespace] || (this._attributes[namespace] = {}))[localName] = {
        value: value,
        prefix: prefix
    };
}, DOMElement.prototype.getAttributeNS = function(namespace, name) {
    var attributes = this._attributes[namespace], value = attributes && attributes[name] && attributes[name].value;
    return "INPUT" === this.tagName && "type" === name ? this.type : "string" != typeof value ? null : value;
}, DOMElement.prototype.removeAttributeNS = function(namespace, name) {
    var attributes = this._attributes[namespace];
    attributes && delete attributes[name];
}, DOMElement.prototype.hasAttributeNS = function(namespace, name) {
    var attributes = this._attributes[namespace];
    return !!attributes && name in attributes;
}, DOMElement.prototype.setAttribute = function(name, value) {
    return this.setAttributeNS(null, name, value);
}, DOMElement.prototype.getAttribute = function(name) {
    return this.getAttributeNS(null, name);
}, DOMElement.prototype.removeAttribute = function(name) {
    return this.removeAttributeNS(null, name);
}, DOMElement.prototype.hasAttribute = function(name) {
    return this.hasAttributeNS(null, name);
}, DOMElement.prototype.removeEventListener = removeEventListener, DOMElement.prototype.addEventListener = addEventListener, 
DOMElement.prototype.dispatchEvent = dispatchEvent, DOMElement.prototype.focus = function() {}, 
DOMElement.prototype.toString = function() {
    return serializeNode(this);
}, DOMElement.prototype.getElementsByClassName = function(classNames) {
    var classes = classNames.split(" "), elems = [];
    return domWalk(this, function(node) {
        if (1 === node.nodeType) {
            var nodeClasses = (node.className || "").split(" ");
            classes.every(function(item) {
                return -1 !== nodeClasses.indexOf(item);
            }) && elems.push(node);
        }
    }), elems;
}, DOMElement.prototype.getElementsByTagName = function(tagName) {
    tagName = tagName.toLowerCase();
    var elems = [];
    return domWalk(this.childNodes, function(node) {
        1 !== node.nodeType || "*" !== tagName && node.tagName.toLowerCase() !== tagName || elems.push(node);
    }), elems;
}, DOMElement.prototype.contains = function(element) {
    return domWalk(this, function(node) {
        return element === node;
    }) || !1;
};

var DOMElement = require("./dom-element.js");

module.exports = DocumentFragment, DocumentFragment.prototype.type = "DocumentFragment", 
DocumentFragment.prototype.nodeType = 11, DocumentFragment.prototype.nodeName = "#document-fragment", 
DocumentFragment.prototype.appendChild = DOMElement.prototype.appendChild, DocumentFragment.prototype.replaceChild = DOMElement.prototype.replaceChild, 
DocumentFragment.prototype.removeChild = DOMElement.prototype.removeChild, DocumentFragment.prototype.toString = function() {
    return this.childNodes.map(function(node) {
        return String(node);
    }).join("");
}, module.exports = DOMText, DOMText.prototype.type = "DOMTextNode", DOMText.prototype.nodeType = 3, 
DOMText.prototype.nodeName = "#text", DOMText.prototype.toString = function() {
    return this.data;
}, DOMText.prototype.replaceData = function(index, length, value) {
    var current = this.data, left = current.substring(0, index), right = current.substring(index + length, current.length);
    this.data = left + value + right, this.length = this.data.length;
};

var slice = Array.prototype.slice;

module.exports = iterativelyWalk, module.exports = Event, Event.prototype.initEvent = function(type, bubbles, cancelable) {
    this.type = type, this.bubbles = bubbles, this.cancelable = cancelable;
}, Event.prototype.preventDefault = function() {};

var Document = require("./document.js");

module.exports = new Document(), module.exports = removeEventListener, module.exports = serializeNode;

var voidElements = [ "area", "base", "br", "col", "embed", "hr", "img", "input", "keygen", "link", "menuitem", "meta", "param", "source", "track", "wbr" ];
